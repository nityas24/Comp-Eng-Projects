/*
**********************************************************************
* Programmer: Nitya Sharma
* Date: Monday November 6 2023
**********************************************************************
* Program: A mini MP3 player.
**********************************************************************
* Description: 

* choose a song out of three by choosing 

* A B or C in the serial monitor. Click a button to start, click the second button

* to pause music (second button not working)

**********************************************************************
* Connections: pins 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
**********************************************************************
*/

//Definitions for all notes used

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST 0#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST 0

#include <Wire.h>

#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(32,16,2);


/***********************************/

//----------------------------------------------------------------------------
//Global Area - All variables in this section have an assigned value
//----------------------------------------------------------------------------

int buzzer = 8; //buzzer connected to pin 8
String userInput; //Allows string to be entered as user input
const byte BUTTONon = 7; //Button connected to pin 7 on Arduino Board
volatile int buttonpressedflag1 = 0; // Flag for button 1 with 0 as value

const byte BUTTONreset = 6; //Gives button a connection to pin 6
volatile int buttonpressedflag2 = 0; // Flag for button 1 with 0 as value


int tempo=114; //Tempo, 114 per quarter

//Song Melody: Ode to Joy

int melody[] = {

  
  NOTE_E4,4,  NOTE_E4,4,  NOTE_F4,4,  NOTE_G4,4,//1
  NOTE_G4,4,  NOTE_F4,4,  NOTE_E4,4,  NOTE_D4,4,
  NOTE_C4,4,  NOTE_C4,4,  NOTE_D4,4,  NOTE_E4,4,
  NOTE_E4,-4, NOTE_D4,8,  NOTE_D4,2,

  NOTE_E4,4,  NOTE_E4,4,  NOTE_F4,4,  NOTE_G4,4,//4
  NOTE_G4,4,  NOTE_F4,4,  NOTE_E4,4,  NOTE_D4,4,
  NOTE_C4,4,  NOTE_C4,4,  NOTE_D4,4,  NOTE_E4,4,
  NOTE_D4,-4,  NOTE_C4,8,  NOTE_C4,2,

  NOTE_D4,4,  NOTE_D4,4,  NOTE_E4,4,  NOTE_C4,4,//8
  NOTE_D4,4,  NOTE_E4,8,  NOTE_F4,8,  NOTE_E4,4, NOTE_C4,4,
  NOTE_D4,4,  NOTE_E4,8,  NOTE_F4,8,  NOTE_E4,4, NOTE_D4,4,
  NOTE_C4,4,  NOTE_D4,4,  NOTE_G3,2,

  NOTE_E4,4,  NOTE_E4,4,  NOTE_F4,4,  NOTE_G4,4,//12
  NOTE_G4,4,  NOTE_F4,4,  NOTE_E4,4,  NOTE_D4,4,
  NOTE_C4,4,  NOTE_C4,4,  NOTE_D4,4,  NOTE_E4,4,
  NOTE_D4,-4,  NOTE_C4,8,  NOTE_C4,2

};


 //calculates the duration of a whole note in milliseconds
int wholenote = (60000 * 4) / tempo; //60 seconds time 4 divided by 114

int divider = 0, noteDuration = 0; //

int notes=sizeof(melody)/sizeof(melody[0])/2; //keep track of duration of note

//-----------------------------------------------------------------
//Setup area - All code in this section runs once
//-----------------------------------------------------------------
void setup()
{

  pinMode(buzzer,OUTPUT); //Buzzer set as output
  lcd.init(); //Initialize LCD
  lcd.backlight(); //Turn Backlight on
  Serial.begin(9600); //Initialize serial monitor
  pinMode(BUTTONon,INPUT_PULLUP); //set button as input
  pinMode(BUTTONreset,INPUT_PULLUP); //set button as input

attachInterrupt(digitalPinToInterrupt(BUTTONon), BUTTONonISR, CHANGE); //Interrupts when first button is clicked
attachInterrupt(digitalPinToInterrupt(BUTTONreset), BUTTONresetISR, CHANGE); //Interrupts when when second button is clicked
  

}

//-----------------------------------------------------------------
// Loop area - All code in this section runs repeatedly
//-----------------------------------------------------------------

void loop() { 
 
  buttonpressedflag1 = digitalRead(BUTTONon);  //Store input from button one 
  buttonpressedflag2 = digitalRead(BUTTONreset); //Store input from button two
  
  lcd.setCursor(2, 0); //Set first row, second column
  lcd.print("Choose a"); //Display following
  lcd.setCursor(2, 1);
  lcd.print("Song");
  delay(2000); //Display for 2 seconds
  lcd.clear(); //Clear Screen

  lcd.setCursor(0, 0); //Set first row, first column
  lcd.print("Choose A, B,"); //Display following
  lcd.setCursor(2, 1);
  lcd.print("or C");

  while (Serial.available() == 0) { //When serial monitor is empty
  }
  userInput = Serial.readString(); //User Input is the serial monitor input
  if (userInput == "A" || userInput == "a") { //If user inputs "A" or "a"
    lcd.clear(); //Clear the LCD
    lcd.setCursor(0, 0); //Set first row, first column
    lcd.print("Press Button"); //Display following
    lcd.setCursor(0, 1); //Set first row, first column
    lcd.print("To Start:");
    
if (buttonpressedflag1 == 1) //If button one is clicked
  
  {
    
    //Allows button one to be read for value
    buttonpressedflag1 = digitalRead(BUTTONon);
  
        while (digitalRead(BUTTONon) == HIGH) { 
          // Wait until the button is released
        }
        lcd.clear(); //Clear LCD
        lcd.setCursor(0, 0); //Set first row, first column
        lcd.print("Playing:"); //Display following
        lcd.setCursor(0, 1); 
        lcd.print("Ode to Joy");
        delay(1000); // Optional debounce time //Allows for button debounce time
        playMelody(); // Call the function to play the melody //Play Ode to Joy

    
   if (buttonpressedflag2 == 1) //If button two is clicked
    {
    //Allows buttons to be read after being clicked
    buttonpressedflag2 = digitalRead(BUTTONreset); //Store input from button two
    while (digitalRead(BUTTONreset) == HIGH) {
          // Wait until the button is released
        }
        lcd.clear(); //Clear LCD
        lcd.setCursor(0, 0); //Set first row, first column
        lcd.print("Back to"); //Display following
        lcd.setCursor(0, 1);
        lcd.print("Menu");
        delay(1000); //Optional debounce time
        lcd.clear(); //Clear LCD
    buttonpressedflag2 = 0; //Make value for flag1 equal to 0

      }
    buttonpressedflag1 = 0; 
      }

      
  }
  
  return; //Return to top of loop
      
}

void BUTTONonISR() { 
  buttonpressedflag1 = 1; //button is equal to one when pressed
}

void BUTTONresetISR() {
  buttonpressedflag2 = 1; //button is equal to one when pressed
}


void playMelody() { //Plays ode to joy
  
  
  unsigned char i; //For loop that plays melody

  for (i = 0; i < 80; i++) {
    
    
    for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
     
      divider = melody[thisNote + 1];
      if (divider > 0) {
        noteDuration = wholenote / divider;
      } else if (divider < 0) {
        noteDuration = wholenote / abs(divider);
        noteDuration *= 1.5;
      }
      
      tone(buzzer, melody[thisNote], noteDuration * 0.9);
      delay(noteDuration);

      
    }
    
    
  }
  
  
}
